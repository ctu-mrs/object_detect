#!/usr/bin/env python

PACKAGE='object_detect'
import roslib;
roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator();

params = gen.add_group("Blob detection parameters");

# Image preprocessing parameters
params_preproc = params.add_group("Image preprocessing");
params_preproc.add("dilate_iterations", int_t, 1, "how many times to dilate the image", 0, 0, 10);
params_preproc.add("erode_iterations", int_t, 1, "how many times to erode the image", 0, 0, 10);
params_preproc.add("gaussianblur_size", int_t, 1, "size of gaussian blur kernel (must be odd number)", 0, 0, 50);
params_preproc.add("medianblur_size", int_t, 1, "size of gaussian blur kernel", 0, 0, 5);

# Image binarization parameters
params_preproc.add("color_center", int_t, 1, "hue center of the color range", 0, 0, 179);
params_preproc.add("color_range", int_t, 1, "width of hue range of the color", 0, 0, 90);
params_preproc.add("min_saturation", int_t, 1, "minimal saturation of the color in the HSB color space", 0, 0, 255);
params_preproc.add("min_brightness", int_t, 1, "minimal brightness of the color in the HSB color space", 0, 0, 255);

# Image hole filling
fill_holes_enum = gen.enum([ gen.const("none",        int_t, 0, "no hole filling in contours"),
                             gen.const("findContours", int_t, 1, "holes are filled using findContours and drawContours"),
                             gen.const("convexHull",   int_t, 2, "holes are filled by filling contours to convex hulls")],
                             "Contour hole filling method")
params_preproc.add("fill_holes", int_t, 0, "Choose contour hole filling to use", 0, 0, 2, edit_method=fill_holes_enum)

params_filter = params.add_group("Blob filtering");
# Filtering by area parameters
params_filter.add("filter_by_area", bool_t, 1, "whether to filter blobs by their area", False);
params_filter.add("min_area", int_t, 1, "minimal blob area", 200, 1, 90000);
params_filter.add("max_area", int_t, 1, "maximal blob area", 10000, 1, 300000);

# Filtering by circularity parameters
params_filter.add("filter_by_circularity", bool_t, 1, "whether to filter blobs by their circularity (ratio of 4*pi*area to perimeter squared)", False);
params_filter.add("min_circularity", double_t, 1, "minimal blob circularity", 0.0, 0.0, 1.0);
params_filter.add("max_circularity", double_t, 1, "maximal blob circularity", 1.0, 0.0, 1.0);

# Filtering by orientation parameters
params_filter.add("filter_by_orientation", bool_t, 1, "whether to filter blobs by their orientation (absolute angle of major axis from x axis)", False);
params_filter.add("min_angle", double_t, 1, "minimal blob angle from x axis", 0.0, 0.0, 1.5708);
params_filter.add("max_angle", double_t, 1, "maximal blob angle from x axis", 1.5708, 0.0, 1.5708);

# Filtering by inertia ratio parameters
params_filter.add("filter_by_inertia", bool_t, 1, "whether to filter blobs by their inertia (ratio of major axis to minor axis)", False);
params_filter.add("min_inertia_ratio", double_t, 1, "minimal blob inertia ratio", 0.0, 0.0, 1.0);
params_filter.add("max_inertia_ratio", double_t, 1, "maximal blob inertia ratio", 1.0, 0.0, 1.0);

# Filtering by convexity parameters
params_filter.add("filter_by_convexity", bool_t, 1, "whether to filter blobs by their convexity (ratio of area to area of convex hull)", False);
params_filter.add("min_convexity", double_t, 1, "minimal blob convexity", 0.0, 0.0, 1.0);
params_filter.add("max_convexity", double_t, 1, "maximal blob convexity", 1.0, 0.0, 1.0);

# Other filtering parameters
params_filter.add("min_dist_between", double_t, 1, "minimal distance between blobs (also affects blob grouping)", 10.0, 0.0, 1470.0);
params_filter.add("min_repeatability", int_t, 1, "in how many threshold steps does the blob need to be detected", 1, 1, 255);

exit(gen.generate(PACKAGE, "object_detect", "DetectionParams"))
