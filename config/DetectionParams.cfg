#!/usr/bin/env python

PACKAGE='object_detect'
import roslib;
roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator();

params_general = gen.add_group("General parameters");

debug_image_enum = gen.enum([ gen.const("rgb_image", int_t, 0, "the debug info will be overlaid on the input RGB image"),
                              gen.const("depthmap", int_t, 1, "the debug info will be overlaid on the input depthmap")],
                              "Debug image source")
params_general.add("debug_image_source", int_t, 0, "Choose which image source to use for debug image", 0, 0, 1, edit_method=debug_image_enum)
params_general.add("distance_min_valid_pixels_ratio", double_t, 1, "Minimum ratio of valid depth pixels in a detected circle for the distance estimation to be considered valid.", 0.2, 0.0, 1.0);

params_output = gen.add_group("Output");
params_output.add("cov_coeffs__xy__no_estimate", double_t, 1, "Covariance coefficient in the xy direction in case of no distance estimate", 0.0, 0.0, 10.0);
params_output.add("cov_coeffs__z__no_estimate", double_t, 1, "Covariance coefficient in the z direction in case of no distance estimate", 0.0, 0.0, 1000.0);

params_output.add("cov_coeffs__xy__blob_size", double_t, 1, "Covariance coefficient in the xy direction in case of distance estimate from blob size", 0.0, 0.0, 10.0);
params_output.add("cov_coeffs__z__blob_size", double_t, 1, "Covariance coefficient in the z direction in case of distance estimate from blob size", 0.0, 0.0, 10.0);

params_output.add("cov_coeffs__xy__depthmap", double_t, 1, "Covariance coefficient in the xy direction in case of distance estimate from depthmap", 0.0, 0.0, 10.0);
params_output.add("cov_coeffs__z__depthmap", double_t, 1, "Covariance coefficient in the z direction in case of distance estimate from depthmap", 0.0, 0.0, 10.0);

params_output.add("cov_coeffs__xy__terabee", double_t, 1, "Covariance coefficient in the xy direction in case of distance estimate from terabee", 0.0, 0.0, 10.0);
params_output.add("cov_coeffs__z__terabee", double_t, 1, "Covariance coefficient in the z direction in case of distance estimate from terabee", 0.0, 0.0, 10.0);

params_output.add("cov_coeffs__xy__two", double_t, 1, "Covariance coefficient in the xy direction in case of distance estimate from two sources", 0.0, 0.0, 10.0);
params_output.add("cov_coeffs__z__two", double_t, 1, "Covariance coefficient in the z direction in case of distance estimate from two sources", 0.0, 0.0, 10.0);

params_output.add("cov_coeffs__xy__all", double_t, 1, "Covariance coefficient in the xy direction in case of distance estimate from all sources", 0.0, 0.0, 10.0);
params_output.add("cov_coeffs__z__all", double_t, 1, "Covariance coefficient in the z direction in case of distance estimate from all sources", 0.0, 0.0, 10.0);

params_object = gen.add_group("Object parameters");

# Color parameters for image binarization
params_object.add("object__physical_height", double_t, 1, "physical size (height) of the object to be detected", 0.11, 0.0, 3.0);

exit(gen.generate(PACKAGE, "object_detect", "DetectionParams"))
