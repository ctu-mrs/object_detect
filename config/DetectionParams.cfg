#!/usr/bin/env python

PACKAGE='object_detect'
import roslib;
roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator();

params_general = gen.add_group("General parameters");

debug_image_enum = gen.enum([ gen.const("rgb_image", int_t, 0, "the debug info will be overlaid on the input RGB image"),
                              gen.const("depthmap", int_t, 1, "the debug info will be overlaid on the input depthmap")],
                              "Debug image source")
params_general.add("debug_image_source", int_t, 0, "Choose which image source to use for debug image", 0, 0, 1, edit_method=debug_image_enum)
params_general.add("distance_min_valid_pixels_ratio", double_t, 1, "Minimum ratio of valid depth pixels in a detected circle for the distance estimation to be considered valid.", 0.2, 0.0, 1.0);

params_output = gen.add_group("Output");
params_output.add("cov_coeffs__xy__no_estimate", double_t, 1, "Covariance coefficient in the xy direction in case of no distance estimate", 0.0, 0.0, 10.0);
params_output.add("cov_coeffs__z__no_estimate", double_t, 1, "Covariance coefficient in the z direction in case of no distance estimate", 0.0, 0.0, 1000.0);

params_output.add("cov_coeffs__xy__blob_size", double_t, 1, "Covariance coefficient in the xy direction in case of distance estimate from blob size", 0.0, 0.0, 10.0);
params_output.add("cov_coeffs__z__blob_size", double_t, 1, "Covariance coefficient in the z direction in case of distance estimate from blob size", 0.0, 0.0, 10.0);

params_output.add("cov_coeffs__xy__depthmap", double_t, 1, "Covariance coefficient in the xy direction in case of distance estimate from depthmap", 0.0, 0.0, 10.0);
params_output.add("cov_coeffs__z__depthmap", double_t, 1, "Covariance coefficient in the z direction in case of distance estimate from depthmap", 0.0, 0.0, 10.0);

params_output.add("cov_coeffs__xy__both", double_t, 1, "Covariance coefficient in the xy direction in case of distance estimate from both sources", 0.0, 0.0, 10.0);
params_output.add("cov_coeffs__z__both", double_t, 1, "Covariance coefficient in the z direction in case of distance estimate from both sources", 0.0, 0.0, 10.0);


params_ball = gen.add_group("Ball parameters");

# Color parameters for image binarization
params_ball.add("segment_color", str_t, 0, "Name of the segmentation config", "unknown")
params_ball.add("ball__physical_diameter", double_t, 1, "physical size (diameter) of the ball to be detected", 0.11, 0.0, 2.0);

# Image binarization method
binarization_enum = gen.enum([
                              gen.const("hsv_thresholding", int_t, 0, "the image will be thresholded based on the specified ranges in the HSV colorspace"),
                              gen.const("lab_thresholding", int_t, 1, "the image will be thresholded based on the specified ranges in the L*a*b* colorspace"),
                              gen.const("hslut", int_t, 2, "the image will be segmented using a HS-lookup table and V thresholding"),
                              gen.const("ablut", int_t, 3, "the image will be segmented using a *a*b-lookup table and l* thresholding")
                               ],
                               "Image binarization method")
params_ball.add("binarization_method", int_t, 0, "Choose binarization method to use", 1, 0, 1, edit_method=binarization_enum)
params_ball.add("override_settings", bool_t, 1, "static settings, loaded from the configs, will be overriden with settings from dynamic reconfigure", False);

blob_radius_enum = gen.enum([ gen.const("maximal_distance", int_t, 0, "blob radius is determined as the maximal distance of the contour points from blob center"),
                              gen.const("median_distance", int_t, 1, "blob radius is determined as the median distance of the contour points from blob center")],
                              "Blob radius calculation method")
params_ball.add("blob_radius_method", int_t, 0, "Choose blob radius estimation method to use", 1, 0, 1, edit_method=blob_radius_enum)

# Image binarization parameters for HSV colorspace binarization method
params_ball.add("ball__hsv__hue_center", int_t, 1, "hue center of the color HSV range", 0, 0, 179);
params_ball.add("ball__hsv__hue_range", int_t, 1, "width of hue HSV range of the color", 0, 0, 180);
params_ball.add("ball__hsv__sat_center", int_t, 1, "saturation center of the color HSV range", 0, 0, 255);
params_ball.add("ball__hsv__sat_range", int_t, 1, "width of saturation HSV range of the color", 0, 0, 256);
params_ball.add("ball__hsv__val_center", int_t, 1, "value center of the color HSV range", 0, 0, 255);
params_ball.add("ball__hsv__val_range", int_t, 1, "width of value HSV range of the color", 0, 0, 256);

# Image binarization parameters for L*a*b* colorspace binarization method
params_ball.add("ball__lab__l_center", int_t, 1, "L* center of the color L*a*b* range", 0, 0, 255);
params_ball.add("ball__lab__l_range", int_t, 1, "width of L* L*a*b* range of the color", 0, 0, 256);
params_ball.add("ball__lab__a_center", int_t, 1, "a* center of the color L*a*b* range", 0, 0, 255);
params_ball.add("ball__lab__a_range", int_t, 1, "width of a* L*a*b* range of the color", 0, 0, 256);
params_ball.add("ball__lab__b_center", int_t, 1, "b* center of the color L*a*b* range", 0, 0, 255);
params_ball.add("ball__lab__b_range", int_t, 1, "width of b* L*a*b* range of the color", 0, 0, 256);

params_preproc = gen.add_group("Image preprocessing");

# Image preprocessing parameters
params_preproc.add("dilate_iterations", int_t, 1, "how many times to dilate the image", 0, 0, 10);
params_preproc.add("erode_iterations", int_t, 1, "how many times to erode the image", 0, 0, 10);
params_preproc.add("gaussianblur_size", int_t, 1, "size of gaussian blur kernel (must be odd number)", 0, 0, 50);
params_preproc.add("medianblur_size", int_t, 1, "size of gaussian blur kernel", 0, 0, 5);

# Image hole filling
fill_holes_enum = gen.enum([ gen.const("none",        int_t, 0, "no hole filling in contours"),
                             gen.const("findContours", int_t, 1, "holes are filled using findContours and drawContours"),
                             gen.const("convexHull",   int_t, 2, "holes are filled by filling contours to convex hulls")],
                             "Contour hole filling method")
params_preproc.add("fill_holes", int_t, 0, "Choose contour hole filling to use", 0, 0, 2, edit_method=fill_holes_enum)

params_filter = gen.add_group("Blob filtering");
# Filtering by area parameters
params_filter.add("filter_by_area", bool_t, 1, "whether to filter blobs by their area", False);
params_filter.add("min_area", int_t, 1, "minimal blob area", 200, 1, 90000);
params_filter.add("max_area", int_t, 1, "maximal blob area", 10000, 1, 300000);

# Filtering by circularity parameters
params_filter.add("filter_by_circularity", bool_t, 1, "whether to filter blobs by their circularity (ratio of 4*pi*area to perimeter squared)", False);
params_filter.add("min_circularity", double_t, 1, "minimal blob circularity", 0.0, 0.0, 1.0);
params_filter.add("max_circularity", double_t, 1, "maximal blob circularity", 1.0, 0.0, 1.0);

# Filtering by orientation parameters
params_filter.add("filter_by_orientation", bool_t, 1, "whether to filter blobs by their orientation (absolute angle of major axis from x axis)", False);
params_filter.add("min_angle", double_t, 1, "minimal blob angle from x axis", 0.0, 0.0, 1.5708);
params_filter.add("max_angle", double_t, 1, "maximal blob angle from x axis", 1.5708, 0.0, 1.5708);

# Filtering by inertia ratio parameters
params_filter.add("filter_by_inertia", bool_t, 1, "whether to filter blobs by their inertia (ratio of major axis to minor axis)", False);
params_filter.add("min_inertia_ratio", double_t, 1, "minimal blob inertia ratio", 0.0, 0.0, 1.0);
params_filter.add("max_inertia_ratio", double_t, 1, "maximal blob inertia ratio", 1.0, 0.0, 1.0);

# Filtering by convexity parameters
params_filter.add("filter_by_convexity", bool_t, 1, "whether to filter blobs by their convexity (ratio of area to area of convex hull)", False);
params_filter.add("min_convexity", double_t, 1, "minimal blob convexity", 0.0, 0.0, 1.0);
params_filter.add("max_convexity", double_t, 1, "maximal blob convexity", 1.0, 0.0, 1.0);

# Other filtering parameters
params_filter.add("min_dist_between", double_t, 1, "minimal distance between blobs (also affects blob grouping)", 10.0, 0.0, 1470.0);
params_filter.add("min_repeatability", int_t, 1, "in how many threshold steps does the blob need to be detected", 1, 1, 255);

exit(gen.generate(PACKAGE, "object_detect", "DetectionParams"))
